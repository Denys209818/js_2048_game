{"mappings":"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","sources":["<anon>","src/scripts/main.js","src/modules/Game.class.js","node_modules/@swc/helpers/esm/_class_call_check.js","node_modules/@swc/helpers/esm/_create_class.js","node_modules/@swc/helpers/esm/_to_consumable_array.js","node_modules/@swc/helpers/esm/_array_without_holes.js","node_modules/@swc/helpers/esm/_array_like_to_array.js","node_modules/@swc/helpers/esm/_iterable_to_array.js","node_modules/@swc/helpers/esm/_non_iterable_spread.js","node_modules/@swc/helpers/esm/_unsupported_iterable_to_array.js","node_modules/@swc/helpers/esm/_type_of.js"],"sourcesContent":["(function () {\n\"use strict\";\nvar $3d28d7f1aac198f5$exports = {};\nfunction $8713978b2328d32b$export$2996f80ef42b8419(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\n\n\nfunction $4fc75ccb937ab1df$var$_defineProperties(target, props) {\n    for(var i = 0; i < props.length; i++){\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nfunction $4fc75ccb937ab1df$export$d60067ff2358eee8(Constructor, protoProps, staticProps) {\n    if (protoProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) $4fc75ccb937ab1df$var$_defineProperties(Constructor, staticProps);\n    return Constructor;\n}\n\n\nfunction $c3b10a83b523f372$export$79e617b1955a2616(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for(var i = 0, arr2 = new Array(len); i < len; i++)arr2[i] = arr[i];\n    return arr2;\n}\n\n\nfunction $c50969dc1df61e8b$export$7e0947b5ad3404e2(arr) {\n    if (Array.isArray(arr)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(arr);\n}\n\n\nfunction $09c9f293d010c0e1$export$1eb58a6e75231000(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\n\nfunction $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\n\n\nfunction $d4f69c5c6c4654b1$export$a5be06335b3a083c(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return (0, $c3b10a83b523f372$export$79e617b1955a2616)(o, minLen);\n}\n\n\nfunction $227c6742e0ff6f82$export$1b5e630bc3aea29f(arr) {\n    return (0, $c50969dc1df61e8b$export$7e0947b5ad3404e2)(arr) || (0, $09c9f293d010c0e1$export$1eb58a6e75231000)(arr) || (0, $d4f69c5c6c4654b1$export$a5be06335b3a083c)(arr) || (0, $38c2d4931cb7a7c4$export$e6f3c4780d19eb2b)();\n}\n\n\nfunction $0b5c99e6a0876eaa$export$5f0017c582d45a2d(obj) {\n    \"@swc/helpers - typeof\";\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\n\n\n\"use strict\";\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */ var $3d28d7f1aac198f5$var$Game = /*#__PURE__*/ function() {\n    function Game(initialState) {\n        (0, $8713978b2328d32b$export$2996f80ef42b8419)(this, Game);\n        this.tiles = [];\n        this.tempTiles = [];\n        this.removedItems = [];\n        this.changed = 0;\n        this.container = document.getElementById(\"tile-container\");\n        if (initialState) this.convertToTiles(initialState);\n    }\n    (0, $4fc75ccb937ab1df$export$d60067ff2358eee8)(Game, [\n        {\n            key: \"moveLeft\",\n            value: function moveLeft() {\n                var _this = this;\n                var sorted = this.tiles.sort(function(item1, item2) {\n                    return _this.getCoords(item1).x - _this.getCoords(item2).x;\n                });\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _this1 = this, _loop = function() {\n                        var tile = _step.value;\n                        var coords = _this1.getCoords(tile);\n                        tile.classList.remove(coords.className);\n                        var tempX = 0;\n                        while(_this1.tiles.filter(function(t) {\n                            return t.classList.contains(\"tile-cell--\".concat(coords.y, \"--\").concat(tempX));\n                        }).length > 0){\n                            tempX++;\n                            if (tempX > 3) break;\n                        }\n                        if (tempX > 3) tempX = coords.x;\n                        if (tempX <= 3 && parseInt(coords.x) !== tempX) _this1.changed++;\n                        tile.classList.add(\"tile-cell--\".concat(coords.y, \"--\").concat(tempX));\n                        if (tempX > 0) {\n                            var prevTempCord = tempX - 1;\n                            var previousItem = _this1.tiles.filter(function(item) {\n                                return item.classList.contains(\"tile-cell--\".concat(coords.y, \"--\").concat(prevTempCord));\n                            })[0];\n                            if (previousItem) {\n                                var prevContent = previousItem.querySelector(\".tile-content\");\n                                var currContent = tile.querySelector(\".tile-content\");\n                                if (prevContent.textContent === currContent.textContent && !_this1.tempTiles.includes(previousItem)) {\n                                    tile.classList.remove(\"tile-cell--\".concat(coords.y, \"--\").concat(tempX));\n                                    tile.classList.add(\"tile-cell--\".concat(coords.y, \"--\").concat(prevTempCord));\n                                    tile.classList.add(\"tile-cell--hide\");\n                                    previousItem.classList.remove(\"tile-cell--\".concat(prevContent.textContent));\n                                    previousItem.classList.add(\"tile-cell--\".concat(parseInt(prevContent.textContent) * 2));\n                                    prevContent.textContent = parseInt(prevContent.textContent) * 2;\n                                    _this1.tempTiles.push(previousItem);\n                                    _this1.removedItems.push(tile);\n                                    _this1.changed++;\n                                }\n                            }\n                        }\n                    };\n                    for(var _iterator = sorted[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveRight\",\n            value: function moveRight() {\n                var _this = this;\n                var sorted = this.tiles.sort(function(item1, item2) {\n                    return _this.getCoords(item2).x - _this.getCoords(item1).x;\n                });\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _this1 = this, _loop = function() {\n                        var tile = _step.value;\n                        var coords = _this1.getCoords(tile);\n                        tile.classList.remove(coords.className);\n                        var tempX = 3;\n                        while(_this1.tiles.filter(function(t) {\n                            return t.classList.contains(\"tile-cell--\".concat(coords.y, \"--\").concat(tempX));\n                        }).length > 0){\n                            tempX--;\n                            if (tempX < 0) break;\n                        }\n                        if (tempX < 0) tempX = coords.x;\n                        if (tempX >= 0 && parseInt(coords.x) !== tempX) _this1.changed++;\n                        tile.classList.add(\"tile-cell--\".concat(coords.y, \"--\").concat(tempX));\n                        if (tempX < 3) {\n                            var prevTempCord = tempX + 1;\n                            var previousItem = _this1.tiles.filter(function(item) {\n                                return item.classList.contains(\"tile-cell--\".concat(coords.y, \"--\").concat(prevTempCord));\n                            })[0];\n                            if (previousItem) {\n                                var prevContent = previousItem.querySelector(\".tile-content\");\n                                var currContent = tile.querySelector(\".tile-content\");\n                                if (prevContent.textContent === currContent.textContent && !_this1.tempTiles.includes(previousItem)) {\n                                    tile.classList.remove(\"tile-cell--\".concat(coords.y, \"--\").concat(tempX));\n                                    tile.classList.add(\"tile-cell--\".concat(coords.y, \"--\").concat(prevTempCord));\n                                    tile.classList.add(\"tile-cell--hide\");\n                                    previousItem.classList.remove(\"tile-cell--\".concat(prevContent.textContent));\n                                    previousItem.classList.add(\"tile-cell--\".concat(parseInt(prevContent.textContent) * 2));\n                                    prevContent.textContent = parseInt(prevContent.textContent) * 2;\n                                    _this1.tempTiles.push(previousItem);\n                                    _this1.removedItems.push(tile);\n                                    _this1.changed++;\n                                }\n                            }\n                        }\n                    };\n                    for(var _iterator = sorted[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveUp\",\n            value: function moveUp() {\n                var _this = this;\n                var sorted = this.tiles.sort(function(item1, item2) {\n                    return _this.getCoords(item1).y - _this.getCoords(item2).y;\n                });\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _this1 = this, _loop = function() {\n                        var tile = _step.value;\n                        var coords = _this1.getCoords(tile);\n                        tile.classList.remove(coords.className);\n                        var tempY = 0;\n                        while(_this1.tiles.filter(function(t) {\n                            return t.classList.contains(\"tile-cell--\".concat(tempY, \"--\").concat(coords.x));\n                        }).length > 0){\n                            tempY++;\n                            if (tempY > 3) break;\n                        }\n                        if (tempY > 3) tempY = coords.y;\n                        if (tempY <= 3 && parseInt(coords.y) !== tempY) _this1.changed++;\n                        tile.classList.add(\"tile-cell--\".concat(tempY, \"--\").concat(coords.x));\n                        if (tempY > 0) {\n                            var prevTempCord = tempY - 1;\n                            var previousItem = _this1.tiles.filter(function(item) {\n                                return item.classList.contains(\"tile-cell--\".concat(prevTempCord, \"--\").concat(coords.x));\n                            })[0];\n                            if (previousItem) {\n                                var prevContent = previousItem.querySelector(\".tile-content\");\n                                var currContent = tile.querySelector(\".tile-content\");\n                                if (prevContent.textContent === currContent.textContent && !_this1.tempTiles.includes(previousItem)) {\n                                    tile.classList.remove(\"tile-cell--\".concat(tempY, \"--\").concat(coords.x));\n                                    tile.classList.add(\"tile-cell--\".concat(prevTempCord, \"--\").concat(coords.x));\n                                    tile.classList.add(\"tile-cell--hide\");\n                                    previousItem.classList.remove(\"tile-cell--\".concat(prevContent.textContent));\n                                    previousItem.classList.add(\"tile-cell--\".concat(parseInt(prevContent.textContent) * 2));\n                                    prevContent.textContent = parseInt(prevContent.textContent) * 2;\n                                    _this1.tempTiles.push(previousItem);\n                                    _this1.removedItems.push(tile);\n                                    _this1.changed++;\n                                }\n                            }\n                        }\n                    };\n                    for(var _iterator = sorted[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            key: \"moveDown\",\n            value: function moveDown() {\n                var _this = this;\n                var sorted = this.tiles.sort(function(item1, item2) {\n                    return _this.getCoords(item2).y - _this.getCoords(item1).y;\n                });\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    var _this1 = this, _loop = function() {\n                        var tile = _step.value;\n                        var coords = _this1.getCoords(tile);\n                        tile.classList.remove(coords.className);\n                        var tempY = 3;\n                        while(_this1.tiles.filter(function(t) {\n                            return t.classList.contains(\"tile-cell--\".concat(tempY, \"--\").concat(coords.x));\n                        }).length > 0){\n                            tempY--;\n                            if (tempY < 0) break;\n                        }\n                        if (tempY < 0) tempY = coords.y;\n                        if (tempY >= 0 && parseInt(coords.y) !== tempY) _this1.changed++;\n                        tile.classList.add(\"tile-cell--\".concat(tempY, \"--\").concat(coords.x));\n                        if (tempY < 3) {\n                            var prevTempCord = tempY + 1;\n                            var previousItem = _this1.tiles.filter(function(item) {\n                                return item.classList.contains(\"tile-cell--\".concat(prevTempCord, \"--\").concat(coords.x));\n                            })[0];\n                            if (previousItem) {\n                                var prevContent = previousItem.querySelector(\".tile-content\");\n                                var currContent = tile.querySelector(\".tile-content\");\n                                if (prevContent.textContent === currContent.textContent && !_this1.tempTiles.includes(previousItem)) {\n                                    tile.classList.remove(\"tile-cell--\".concat(tempY, \"--\").concat(coords.x));\n                                    tile.classList.add(\"tile-cell--\".concat(prevTempCord, \"--\").concat(coords.x));\n                                    tile.classList.add(\"tile-cell--hide\");\n                                    previousItem.classList.remove(\"tile-cell--\".concat(prevContent.textContent));\n                                    previousItem.classList.add(\"tile-cell--\".concat(parseInt(prevContent.textContent) * 2));\n                                    prevContent.textContent = parseInt(prevContent.textContent) * 2;\n                                    _this1.tempTiles.push(previousItem);\n                                    _this1.removedItems.push(tile);\n                                    _this1.changed++;\n                                }\n                            }\n                        }\n                    };\n                    for(var _iterator = sorted[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true)_loop();\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n            }\n        },\n        {\n            /**\n   * @returns {number}\n   */ key: \"getScore\",\n            value: function getScore() {\n                var state = this.getState();\n                var sum = 0;\n                for(var i = 0; i < 4; i++)for(var j = 0; j < 4; j++)sum += state[i][j];\n                return sum;\n            }\n        },\n        {\n            /**\n   * @returns {number[][]}\n   */ key: \"getState\",\n            value: function getState() {\n                var result = [];\n                for(var i = 0; i < 4; i++)result.push([\n                    0,\n                    0,\n                    0,\n                    0\n                ]);\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = this.tiles.filter(function(t) {\n                        return !t.classList.contains(\"tile-cell--hide\");\n                    })[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var tile = _step.value;\n                        var coords = this.getCoords(tile);\n                        result[coords.y][coords.x] = parseInt(tile.querySelector(\".tile-content\").innerHTML);\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return result;\n            }\n        },\n        {\n            /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */ key: \"getStatus\",\n            value: function getStatus() {\n                if (this.tiles.filter(function(tile) {\n                    var inner = tile.querySelector(\".tile-content\");\n                    return parseInt(inner.innerHTML) === 2048;\n                }).length > 0) return \"win\";\n                if (!this.checkPosibilityToContinue()) return \"lose\";\n                else {\n                    var btn = document.getElementsByClassName(\"button\")[0].classList.contains(\"start\");\n                    if (btn) return \"idle\";\n                    else return \"playing\";\n                }\n            }\n        },\n        {\n            /**\n   * Starts the game.\n   */ key: \"start\",\n            value: function start() {\n                var btn = document.getElementsByClassName(\"button\")[0];\n                this.tiles = [];\n                btn.addEventListener(\"click\", this.connectStart.bind(this));\n                document.addEventListener(\"keydown\", this.press.bind(this));\n            }\n        },\n        {\n            /**\n   * Resets the game.\n   */ key: \"restart\",\n            value: function restart() {\n                this.start();\n            }\n        },\n        {\n            // Add your own methods here\n            key: \"connectStart\",\n            value: function connectStart(e) {\n                e.preventDefault();\n                var btn = e.target;\n                this.tiles = [];\n                document.getElementById(\"tile-container\").innerHTML = \"\";\n                if (btn.classList.contains(\"start\")) {\n                    btn.classList.remove(\"start\");\n                    btn.classList.add(\"restart\");\n                    btn.textContent = \"Restart\";\n                }\n                this.spawnItem();\n                this.spawnItem();\n                var visible = (0, $227c6742e0ff6f82$export$1b5e630bc3aea29f)(document.getElementsByClassName(\"message\")).filter(function(x) {\n                    return !x.classList.contains(\"hidden\");\n                })[0];\n                if (visible) visible.classList.add(\"hidden\");\n                document.getElementsByClassName(\"message-start\")[0].classList.remove(\"hidden\");\n            }\n        },\n        {\n            key: \"press\",\n            value: function press(e) {\n                var _this = this;\n                var key = e.key;\n                this.tempTiles = [];\n                this.removedItems = [];\n                this.changed = 0;\n                if (this.tiles.length === 0) return;\n                switch(key){\n                    case \"ArrowUp\":\n                        this.moveUp();\n                        break;\n                    case \"ArrowDown\":\n                        this.moveDown();\n                        break;\n                    case \"ArrowLeft\":\n                        this.moveLeft();\n                        break;\n                    case \"ArrowRight\":\n                        this.moveRight();\n                        break;\n                }\n                this.sleep().then(function() {\n                    for(var i = 0; i < _this.removedItems.length; i++)_this.removedItems[i].remove();\n                    if (_this.changed > 0) _this.spawnItem();\n                    if (!_this.checkPosibilityToContinue()) {\n                        document.addEventListener(\"keydown\", function() {});\n                        var getStat = _this.getStatus();\n                        document.getElementsByClassName(\"message-start\")[0].classList.add(\"hidden\");\n                        document.getElementsByClassName(\"message-\".concat(getStat))[0].classList.remove(\"hidden\");\n                    }\n                });\n            }\n        },\n        {\n            key: \"setScoreHTML\",\n            value: function setScoreHTML() {\n                var score = document.getElementsByClassName(\"game-score\")[0];\n                score.textContent = this.getScore();\n            }\n        },\n        {\n            key: \"spawnItem\",\n            value: function spawnItem() {\n                var activeTiles = this.tiles.filter(function(t) {\n                    return !t.classList.contains(\"tile-cell--hide\");\n                });\n                if (activeTiles.length < 16) {\n                    var newItem = document.createElement(\"div\");\n                    var side = Math.round(Math.random() * 10) < 2 ? 4 : 2;\n                    var tempX = Math.floor(Math.random() * 4);\n                    var tempY = Math.floor(Math.random() * 4);\n                    while(activeTiles.filter(function(t) {\n                        return t.classList.contains(\"tile-cell--\".concat(tempY, \"--\").concat(tempX));\n                    }).length > 0){\n                        tempX = Math.floor(Math.random() * 4);\n                        tempY = Math.floor(Math.random() * 4);\n                    }\n                    newItem.classList.add(\"tile-cell\");\n                    newItem.classList.add(\"tile-cell--\".concat(side));\n                    newItem.classList.add(\"tile-cell--\".concat(tempY, \"--\").concat(tempX));\n                    newItem.classList.add(\"tile-cell--hide\");\n                    var pItem = document.createElement(\"p\");\n                    pItem.classList.add(\"tile-content\");\n                    pItem.textContent = side;\n                    newItem.appendChild(pItem);\n                    this.container.append(newItem);\n                    this.tiles.push(newItem);\n                    newItem.classList.remove(\"tile-cell--hide\");\n                    this.setScoreHTML();\n                }\n            }\n        },\n        {\n            key: \"sleep\",\n            value: function sleep() {\n                var ms = arguments.length > 0 && arguments[0] !== void 0 ? arguments[0] : 200;\n                var prom = new Promise(function(resolve) {\n                    setTimeout(function() {\n                        resolve();\n                    }, ms);\n                });\n                return prom;\n            }\n        },\n        {\n            key: \"getCoords\",\n            value: function getCoords(tile) {\n                var x = 0;\n                var y = 0;\n                var classN = \"\";\n                var _iteratorNormalCompletion = true, _didIteratorError = false, _iteratorError = undefined;\n                try {\n                    for(var _iterator = tile.classList[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true){\n                        var className = _step.value;\n                        if (className.length >= 15 && className !== \"tile-cell--hide\") {\n                            x = className.slice(-1);\n                            y = className.slice(-4, -3);\n                            classN = className;\n                        }\n                    }\n                } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                } finally{\n                    try {\n                        if (!_iteratorNormalCompletion && _iterator.return != null) {\n                            _iterator.return();\n                        }\n                    } finally{\n                        if (_didIteratorError) {\n                            throw _iteratorError;\n                        }\n                    }\n                }\n                return {\n                    x: x,\n                    y: y,\n                    className: classN\n                };\n            }\n        },\n        {\n            key: \"checkPosibilityToContinue\",\n            value: function checkPosibilityToContinue() {\n                this.tiles = this.tiles.filter(function(cell) {\n                    return !cell.classList.contains(\"tile-cell--hide\");\n                });\n                if (this.tiles.length >= 16) {\n                    var _this = this, _loop = function(i) {\n                        var current = _this.tiles[i].querySelector(\".tile-content\");\n                        var cCoords = _this.getCoords(_this.tiles[i]);\n                        if (cCoords.x > 0) {\n                            var prevLeft = _this.tiles.filter(function(cell) {\n                                return cell.classList.contains(\"tile-cell--\".concat(cCoords.y, \"--\").concat(cCoords.x - 1));\n                            })[0];\n                            if (prevLeft && current.textContent === prevLeft.querySelector(\".tile-content\").textContent) return {\n                                v: true\n                            };\n                        }\n                        if (cCoords.y > 0) {\n                            var prevTop = _this.tiles.filter(function(cell) {\n                                return cell.classList.contains(\"tile-cell--\".concat(cCoords.y - 1, \"--\").concat(cCoords.x));\n                            })[0];\n                            if (prevTop && current.textContent === prevTop.querySelector(\".tile-content\").textContent) return {\n                                v: true\n                            };\n                        }\n                        if (cCoords.y < 3) {\n                            var prevBottom = _this.tiles.filter(function(cell) {\n                                return cell.classList.contains(\"tile-cell--\".concat(cCoords.y + 1, \"--\").concat(cCoords.x));\n                            })[0];\n                            if (prevBottom && current.textContent === prevBottom.querySelector(\".tile-content\").textContent) return {\n                                v: true\n                            };\n                        }\n                        if (cCoords.x < 3) {\n                            var prevRight = _this.tiles.filter(function(cell) {\n                                return cell.classList.contains(\"tile-cell--\".concat(cCoords.y, \"--\").concat(cCoords.x + 1));\n                            })[0];\n                            if (prevRight && current.textContent === prevRight.querySelector(\".tile-content\").textContent) return {\n                                v: true\n                            };\n                        }\n                    };\n                    for(var i = 0; i < this.tiles.length; i++){\n                        var _ret = _loop(i);\n                        if ((0, $0b5c99e6a0876eaa$export$5f0017c582d45a2d)(_ret) === \"object\") return _ret.v;\n                    }\n                    return false;\n                }\n                return true;\n            }\n        },\n        {\n            key: \"convertToTiles\",\n            value: function convertToTiles(state) {\n                document.getElementById(\"tile-container\").innerHTML = \"\";\n                for(var i = 0; i < 4; i++){\n                    for(var j = 0; j < 4; j++)if (state[i][j] > 0) {\n                        var div = document.createElement(\"div\");\n                        div.classList.add(\"tile-cell\");\n                        div.classList.add(\"tile-cell--\".concat(state[i][j]));\n                        div.classList.add(\"tile-cell--\".concat(i, \"--\").concat(j));\n                        var p = document.createElement(\"p\");\n                        p.classList.add(\"tile-content\");\n                        p.textContent = state[i][j];\n                        div.appendChild(p);\n                        document.getElementById(\"tile-container\").appendChild(div);\n                        this.tiles.add(div);\n                    }\n                }\n            }\n        }\n    ]);\n    return Game;\n}();\n$3d28d7f1aac198f5$exports = $3d28d7f1aac198f5$var$Game;\n\n\nvar $197cd56b15c33885$var$game = new $3d28d7f1aac198f5$exports();\n$197cd56b15c33885$var$game.start();\n\n})();\n//# sourceMappingURL=index.f0bb72ee.js.map\n","'use strict';\n\n// Uncomment the next lines to use your game instance in the browser\nconst Game = require('../modules/Game.class');\nconst game = new Game();\n\ngame.start();\n","'use strict';\n\n/**\n * This class represents the game.\n * Now it has a basic structure, that is needed for testing.\n * Feel free to add more props and methods if needed.\n */\nclass Game {\n  /**\n   * Creates a new game instance.\n   *\n   * @param {number[][]} initialState\n   * The initial state of the board.\n   * @default\n   * [[0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0],\n   *  [0, 0, 0, 0]]\n   *\n   * If passed, the board will be initialized with the provided\n   * initial state.\n   */\n  constructor(initialState) {\n    this.tiles = [];\n    this.tempTiles = [];\n    this.removedItems = [];\n    this.changed = 0;\n    this.container = document.getElementById('tile-container');\n\n    if (initialState) {\n      this.convertToTiles(initialState);\n    }\n  }\n\n  moveLeft() {\n    const sorted = this.tiles.sort((item1, item2) =>\n      this.getCoords(item1).x - this.getCoords(item2).x);\n\n    for (const tile of sorted) {\n      const coords = this.getCoords(tile);\n\n      tile.classList.remove(coords.className);\n\n      let tempX = 0;\n\n      while (this.tiles\n        .filter(t => t.classList\n          .contains(`tile-cell--${coords.y}--${tempX}`))\n        .length > 0) {\n        tempX++;\n\n        if (tempX > 3) {\n          break;\n        }\n      }\n\n      if (tempX > 3) {\n        tempX = coords.x;\n      }\n\n      if (tempX <= 3 && parseInt(coords.x) !== tempX) {\n        this.changed++;\n      }\n\n      tile.classList.add(`tile-cell--${coords.y}--${tempX}`);\n\n      if (tempX > 0) {\n        const prevTempCord = tempX - 1;\n\n        const previousItem = this.tiles\n          .filter(item => item.classList\n            .contains(`tile-cell--${coords.y}--${prevTempCord}`))[0];\n\n        if (previousItem) {\n          const prevContent = previousItem.querySelector('.tile-content');\n          const currContent = tile.querySelector('.tile-content');\n\n          if (prevContent.textContent === currContent.textContent\n            && !this.tempTiles.includes(previousItem)) {\n            tile.classList.remove(`tile-cell--${coords.y}--${tempX}`);\n            tile.classList.add(`tile-cell--${coords.y}--${prevTempCord}`);\n            tile.classList.add('tile-cell--hide');\n\n            previousItem.classList\n              .remove(`tile-cell--${prevContent.textContent}`);\n\n            previousItem.classList\n              .add(`tile-cell--${parseInt(prevContent.textContent) * 2}`);\n\n            prevContent.textContent = parseInt(prevContent.textContent) * 2;\n\n            this.tempTiles.push(previousItem);\n            this.removedItems.push(tile);\n\n            this.changed++;\n          }\n        }\n      }\n    }\n  }\n\n  moveRight() {\n    const sorted = this.tiles.sort((item1, item2) =>\n      this.getCoords(item2).x - this.getCoords(item1).x);\n\n    for (const tile of sorted) {\n      const coords = this.getCoords(tile);\n\n      tile.classList.remove(coords.className);\n\n      let tempX = 3;\n\n      while (this.tiles\n        .filter(t => t.classList\n          .contains(`tile-cell--${coords.y}--${tempX}`))\n        .length > 0) {\n        tempX--;\n\n        if (tempX < 0) {\n          break;\n        }\n      }\n\n      if (tempX < 0) {\n        tempX = coords.x;\n      }\n\n      if (tempX >= 0 && parseInt(coords.x) !== tempX) {\n        this.changed++;\n      }\n\n      tile.classList.add(`tile-cell--${coords.y}--${tempX}`);\n\n      if (tempX < 3) {\n        const prevTempCord = tempX + 1;\n\n        const previousItem = this.tiles\n          .filter(item => item.classList\n            .contains(`tile-cell--${coords.y}--${prevTempCord}`))[0];\n\n        if (previousItem) {\n          const prevContent = previousItem.querySelector('.tile-content');\n          const currContent = tile.querySelector('.tile-content');\n\n          if (prevContent.textContent === currContent.textContent\n            && !this.tempTiles.includes(previousItem)) {\n            tile.classList.remove(`tile-cell--${coords.y}--${tempX}`);\n            tile.classList.add(`tile-cell--${coords.y}--${prevTempCord}`);\n            tile.classList.add('tile-cell--hide');\n\n            previousItem.classList\n              .remove(`tile-cell--${prevContent.textContent}`);\n\n            previousItem.classList\n              .add(`tile-cell--${parseInt(prevContent.textContent) * 2}`);\n\n            prevContent.textContent = parseInt(prevContent.textContent) * 2;\n\n            this.tempTiles.push(previousItem);\n            this.removedItems.push(tile);\n\n            this.changed++;\n          }\n        }\n      }\n    }\n  }\n\n  moveUp() {\n    const sorted = this.tiles.sort((item1, item2) =>\n      this.getCoords(item1).y - this.getCoords(item2).y);\n\n    for (const tile of sorted) {\n      const coords = this.getCoords(tile);\n\n      tile.classList.remove(coords.className);\n\n      let tempY = 0;\n\n      while (this.tiles\n        .filter(t => t.classList\n          .contains(`tile-cell--${tempY}--${coords.x}`))\n        .length > 0) {\n        tempY++;\n\n        if (tempY > 3) {\n          break;\n        }\n      }\n\n      if (tempY > 3) {\n        tempY = coords.y;\n      }\n\n      if (tempY <= 3 && parseInt(coords.y) !== tempY) {\n        this.changed++;\n      }\n\n      tile.classList.add(`tile-cell--${tempY}--${coords.x}`);\n\n      if (tempY > 0) {\n        const prevTempCord = tempY - 1;\n\n        const previousItem = this.tiles\n          .filter(item => item.classList\n            .contains(`tile-cell--${prevTempCord}--${coords.x}`))[0];\n\n        if (previousItem) {\n          const prevContent = previousItem.querySelector('.tile-content');\n          const currContent = tile.querySelector('.tile-content');\n\n          if (prevContent.textContent === currContent.textContent\n            && !this.tempTiles.includes(previousItem)) {\n            tile.classList.remove(`tile-cell--${tempY}--${coords.x}`);\n            tile.classList.add(`tile-cell--${prevTempCord}--${coords.x}`);\n            tile.classList.add('tile-cell--hide');\n\n            previousItem.classList\n              .remove(`tile-cell--${prevContent.textContent}`);\n\n            previousItem.classList\n              .add(`tile-cell--${parseInt(prevContent.textContent) * 2}`);\n\n            prevContent.textContent = parseInt(prevContent.textContent) * 2;\n\n            this.tempTiles.push(previousItem);\n            this.removedItems.push(tile);\n\n            this.changed++;\n          }\n        }\n      }\n    }\n  }\n\n  moveDown() {\n    const sorted = this.tiles.sort((item1, item2) =>\n      this.getCoords(item2).y - this.getCoords(item1).y);\n\n    for (const tile of sorted) {\n      const coords = this.getCoords(tile);\n\n      tile.classList.remove(coords.className);\n\n      let tempY = 3;\n\n      while (this.tiles\n        .filter(t => t.classList\n          .contains(`tile-cell--${tempY}--${coords.x}`))\n        .length > 0) {\n        tempY--;\n\n        if (tempY < 0) {\n          break;\n        }\n      }\n\n      if (tempY < 0) {\n        tempY = coords.y;\n      }\n\n      if (tempY >= 0 && parseInt(coords.y) !== tempY) {\n        this.changed++;\n      }\n\n      tile.classList.add(`tile-cell--${tempY}--${coords.x}`);\n\n      if (tempY < 3) {\n        const prevTempCord = tempY + 1;\n\n        const previousItem = this.tiles\n          .filter(item => item.classList\n            .contains(`tile-cell--${prevTempCord}--${coords.x}`))[0];\n\n        if (previousItem) {\n          const prevContent = previousItem.querySelector('.tile-content');\n          const currContent = tile.querySelector('.tile-content');\n\n          if (prevContent.textContent === currContent.textContent\n            && !this.tempTiles.includes(previousItem)) {\n            tile.classList.remove(`tile-cell--${tempY}--${coords.x}`);\n            tile.classList.add(`tile-cell--${prevTempCord}--${coords.x}`);\n            tile.classList.add('tile-cell--hide');\n\n            previousItem.classList\n              .remove(`tile-cell--${prevContent.textContent}`);\n\n            previousItem.classList\n              .add(`tile-cell--${parseInt(prevContent.textContent) * 2}`);\n\n            prevContent.textContent = parseInt(prevContent.textContent) * 2;\n\n            this.tempTiles.push(previousItem);\n            this.removedItems.push(tile);\n\n            this.changed++;\n          }\n        }\n      }\n    }\n  }\n\n  /**\n   * @returns {number}\n   */\n  getScore() {\n    const state = this.getState();\n    let sum = 0;\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        sum += state[i][j];\n      }\n    }\n\n    return sum;\n  }\n\n  /**\n   * @returns {number[][]}\n   */\n  getState() {\n    const result = [];\n\n    for (let i = 0; i < 4; i++) {\n      result.push([0, 0, 0, 0]);\n    }\n\n    for (const tile of this.tiles\n      .filter(t => !t.classList.contains('tile-cell--hide'))) {\n      const coords = this.getCoords(tile);\n\n      result[coords.y][coords.x] = parseInt(tile\n        .querySelector('.tile-content').innerHTML);\n    }\n\n    return result;\n  }\n\n  /**\n   * Returns the current game status.\n   *\n   * @returns {string} One of: 'idle', 'playing', 'win', 'lose'\n   *\n   * `idle` - the game has not started yet (the initial state);\n   * `playing` - the game is in progress;\n   * `win` - the game is won;\n   * `lose` - the game is lost\n   */\n  getStatus() {\n    if (this.tiles.filter(tile => {\n      const inner = tile.querySelector('.tile-content');\n\n      return parseInt(inner.innerHTML) === 2048;\n    }).length > 0) {\n      return 'win';\n    }\n\n    if (!this.checkPosibilityToContinue()) {\n      return 'lose';\n    } else {\n      const btn = document\n        .getElementsByClassName('button')[0].classList.contains('start');\n\n      if (btn) {\n        return 'idle';\n      } else {\n        return 'playing';\n      }\n    }\n  }\n\n  /**\n   * Starts the game.\n   */\n  start() {\n    const btn = document.getElementsByClassName('button')[0];\n\n    this.tiles = [];\n\n    btn.addEventListener('click', this.connectStart.bind(this));\n    document.addEventListener('keydown', this.press.bind(this));\n  }\n\n  /**\n   * Resets the game.\n   */\n  restart() {\n    this.start();\n  }\n\n  // Add your own methods here\n\n  connectStart(e) {\n    e.preventDefault();\n\n    const btn = e.target;\n\n    this.tiles = [];\n    document.getElementById('tile-container').innerHTML = '';\n\n    if (btn.classList.contains('start')) {\n      btn.classList.remove('start');\n      btn.classList.add('restart');\n\n      btn.textContent = 'Restart';\n    }\n\n    this.spawnItem();\n    this.spawnItem();\n\n    const visible = [...document.getElementsByClassName('message')]\n      .filter(x => !x.classList.contains('hidden'))[0];\n\n    if (visible) {\n      visible.classList.add('hidden');\n    }\n\n    document\n      .getElementsByClassName('message-start')[0]\n      .classList.remove('hidden');\n  }\n\n  press(e) {\n    const key = e.key;\n\n    this.tempTiles = [];\n    this.removedItems = [];\n    this.changed = 0;\n\n    if (this.tiles.length === 0) {\n      return;\n    }\n\n    switch (key) {\n      case 'ArrowUp': {\n        this.moveUp();\n\n        break;\n      }\n\n      case 'ArrowDown': {\n        this.moveDown();\n\n        break;\n      }\n\n      case 'ArrowLeft': {\n        this.moveLeft();\n\n        break;\n      }\n\n      case 'ArrowRight': {\n        this.moveRight();\n\n        break;\n      }\n    }\n\n    this.sleep().then(() => {\n      for (let i = 0; i < this.removedItems.length; i++) {\n        this.removedItems[i].remove();\n      }\n\n      if (this.changed > 0) {\n        this.spawnItem();\n      }\n\n      if (!this.checkPosibilityToContinue()) {\n        document.addEventListener('keydown', () => {});\n\n        const getStat = this.getStatus();\n\n        document\n          .getElementsByClassName('message-start')[0]\n          .classList.add('hidden');\n\n        document\n          .getElementsByClassName(`message-${getStat}`)[0]\n          .classList.remove('hidden');\n      }\n    });\n  }\n\n  setScoreHTML() {\n    const score = document.getElementsByClassName('game-score')[0];\n\n    score.textContent = this.getScore();\n  }\n\n  spawnItem() {\n    const activeTiles = this.tiles\n      .filter(t => !t.classList.contains('tile-cell--hide'));\n\n    if (activeTiles\n      .length < 16) {\n      const newItem = document.createElement('div');\n\n      const side = Math.round(Math.random() * 10) < 2 ? 4 : 2;\n\n      let tempX = Math.floor(Math.random() * 4);\n      let tempY = Math.floor(Math.random() * 4);\n\n      while (activeTiles\n        .filter(t => t.classList\n          .contains(`tile-cell--${tempY}--${tempX}`)).length > 0) {\n        tempX = Math.floor(Math.random() * 4);\n        tempY = Math.floor(Math.random() * 4);\n      }\n\n      newItem.classList.add('tile-cell');\n      newItem.classList.add(`tile-cell--${side}`);\n      newItem.classList.add(`tile-cell--${tempY}--${tempX}`);\n      newItem.classList.add('tile-cell--hide');\n\n      const pItem = document.createElement('p');\n\n      pItem.classList.add('tile-content');\n      pItem.textContent = side;\n\n      newItem.appendChild(pItem);\n      this.container.append(newItem);\n      this.tiles.push(newItem);\n\n      newItem.classList.remove('tile-cell--hide');\n\n      this.setScoreHTML();\n    }\n  }\n\n  sleep(ms = 200) {\n    const prom = new Promise((resolve) => {\n      setTimeout(() => {\n        resolve();\n      }, ms);\n    });\n\n    return prom;\n  }\n\n  getCoords(tile) {\n    let x = 0;\n    let y = 0;\n    let classN = '';\n\n    for (const className of tile.classList) {\n      if (className.length >= 15 && className !== 'tile-cell--hide') {\n        x = className.slice(-1);\n        y = className.slice(-4, -3);\n\n        classN = className;\n      }\n    }\n\n    return {\n      x,\n      y,\n      className: classN,\n    };\n  }\n\n  checkPosibilityToContinue() {\n    this.tiles = this.tiles\n      .filter(cell => !cell.classList.contains('tile-cell--hide'));\n\n    if (this.tiles.length >= 16) {\n      for (let i = 0; i < this.tiles.length; i++) {\n        const current = this.tiles[i].querySelector('.tile-content');\n        const cCoords = this.getCoords(this.tiles[i]);\n\n        if (cCoords.x > 0) {\n          const prevLeft = this.tiles\n            .filter(cell => cell.classList\n              .contains(`tile-cell--${cCoords.y}--${cCoords.x - 1}`))[0];\n\n          if (prevLeft && current.textContent === prevLeft\n            .querySelector('.tile-content').textContent) {\n            return true;\n          }\n        }\n\n        if (cCoords.y > 0) {\n          const prevTop = this.tiles\n            .filter(cell => cell.classList\n              .contains(`tile-cell--${cCoords.y - 1}--${cCoords.x}`))[0];\n\n          if (prevTop && current.textContent === prevTop\n            .querySelector('.tile-content').textContent) {\n            return true;\n          }\n        }\n\n        if (cCoords.y < 3) {\n          const prevBottom = this.tiles\n            .filter(cell => cell.classList\n              .contains(`tile-cell--${cCoords.y + 1}--${cCoords.x}`))[0];\n\n          if (prevBottom && current.textContent === prevBottom\n            .querySelector('.tile-content').textContent) {\n            return true;\n          }\n        }\n\n        if (cCoords.x < 3) {\n          const prevRight = this.tiles\n            .filter(cell => cell.classList\n              .contains(`tile-cell--${cCoords.y}--${cCoords.x + 1}`))[0];\n\n          if (prevRight && current.textContent === prevRight\n            .querySelector('.tile-content').textContent) {\n            return true;\n          }\n        }\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  convertToTiles(state) {\n    document.getElementById('tile-container').innerHTML = '';\n\n    for (let i = 0; i < 4; i++) {\n      for (let j = 0; j < 4; j++) {\n        if (state[i][j] > 0) {\n          const div = document.createElement('div');\n\n          div.classList.add('tile-cell');\n          div.classList.add(`tile-cell--${state[i][j]}`);\n          div.classList.add(`tile-cell--${i}--${j}`);\n\n          const p = document.createElement('p');\n\n          p.classList.add('tile-content');\n          p.textContent = state[i][j];\n\n          div.appendChild(p);\n\n          document.getElementById('tile-container')\n            .appendChild(div);\n\n          this.tiles.add(div);\n        }\n      }\n    }\n  }\n}\n\nmodule.exports = Game;\n","export function _class_call_check(instance, Constructor) {\n    if (!(instance instanceof Constructor)) throw new TypeError(\"Cannot call a class as a function\");\n}\nexport { _class_call_check as _ };\n","function _defineProperties(target, props) {\n    for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n\n        if (\"value\" in descriptor) descriptor.writable = true;\n\n        Object.defineProperty(target, descriptor.key, descriptor);\n    }\n}\nexport function _create_class(Constructor, protoProps, staticProps) {\n    if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n    if (staticProps) _defineProperties(Constructor, staticProps);\n\n    return Constructor;\n}\nexport { _create_class as _ };\n","import { _array_without_holes } from \"./_array_without_holes.js\";\nimport { _iterable_to_array } from \"./_iterable_to_array.js\";\nimport { _non_iterable_spread } from \"./_non_iterable_spread.js\";\nimport { _unsupported_iterable_to_array } from \"./_unsupported_iterable_to_array.js\";\n\nexport function _to_consumable_array(arr) {\n    return _array_without_holes(arr) || _iterable_to_array(arr) || _unsupported_iterable_to_array(arr) || _non_iterable_spread();\n}\nexport { _to_consumable_array as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _array_without_holes(arr) {\n    if (Array.isArray(arr)) return _array_like_to_array(arr);\n}\nexport { _array_without_holes as _ };\n","export function _array_like_to_array(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n    return arr2;\n}\nexport { _array_like_to_array as _ };\n","export function _iterable_to_array(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) {\n        return Array.from(iter);\n    }\n}\nexport { _iterable_to_array as _ };\n","export function _non_iterable_spread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nexport { _non_iterable_spread as _ };\n","import { _array_like_to_array } from \"./_array_like_to_array.js\";\n\nexport function _unsupported_iterable_to_array(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _array_like_to_array(o, minLen);\n\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(n);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _array_like_to_array(o, minLen);\n}\nexport { _unsupported_iterable_to_array as _ };\n","export function _type_of(obj) {\n    \"@swc/helpers - typeof\";\n\n    return obj && typeof Symbol !== \"undefined\" && obj.constructor === Symbol ? \"symbol\" : typeof obj;\n}\nexport { _type_of as _ };\n"],"names":["$4fc75ccb937ab1df$var$_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","$c3b10a83b523f372$export$79e617b1955a2616","arr","len","arr2","Array","$197cd56b15c33885$var$game","protoProps","staticProps","Game","initialState","instance","Constructor","TypeError","tiles","tempTiles","removedItems","changed","container","document","getElementById","convertToTiles","value","_this","sorted","sort","item1","item2","getCoords","x","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_this1","_iterator","Symbol","iterator","next","done","_loop","tile","coords","classList","remove","className","tempX","filter","t","contains","concat","y","parseInt","add","prevTempCord","previousItem","item","prevContent","querySelector","currContent","textContent","includes","push","err","return","tempY","state","getState","sum","j","result","innerHTML","inner","checkPosibilityToContinue","getElementsByClassName","btn","addEventListener","connectStart","bind","press","start","e","preventDefault","spawnItem","visible","isArray","iter","from","o","minLen","n","prototype","toString","call","slice","constructor","name","test","moveUp","moveDown","moveLeft","moveRight","sleep","then","getStat","getStatus","score","getScore","activeTiles","newItem","createElement","side","Math","round","random","floor","pItem","appendChild","append","setScoreHTML","ms","arguments","Promise","resolve","setTimeout","classN","cell","_ret","current","cCoords","prevLeft","v","prevTop","prevBottom","prevRight","obj","div","p"],"version":3,"file":"index.f0bb72ee.js.map"}